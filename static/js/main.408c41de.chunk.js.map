{"version":3,"sources":["utils.js","Follower.js","App.js","useFetch.js","index.js"],"names":["paginate","people","numberOfPages","Math","ceil","length","Array","from","_","i","start","slice","Follower","avatar_url","login","html_url","id","className","src","alt","href","App","useState","page","setPage","followers","setFollowers","loading","setLoading","apiData","setApidata","getProducts","a","fetch","response","json","data","console","log","useEffect","useFetch","map","follower","key","onClick","currentPage","prevPage","item","index","nextPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAceA,EAbE,SAACC,GACd,IACMC,EAAgBC,KAAKC,KAAMH,EAAOI,OADnB,IASrB,OANiBC,MAAMC,KAAK,CAACF,OAAOH,IAAe,SAACM,EAAEC,GAEtD,IAAMC,EALe,GAKPD,EAEd,OADiBR,EAAOU,MAAMD,EAAMA,EANf,QCWVE,EAVE,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,WAAWC,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,SAAiB,EAARC,GAC3C,OACE,6BAASC,UAAU,QACjB,yBAAKC,IAAKL,EAAYM,IAAKL,IAC3B,4BAAKA,GACL,uBAAGM,KAAML,EAAUE,UAAU,OAA7B,kBCqESI,MAzEf,WAAe,MAEUC,mBAAS,GAFnB,mBAENC,EAFM,KAEDC,EAFC,OAGoBF,mBAAS,IAH7B,mBAGNG,EAHM,KAGIC,EAHJ,OCCS,WAAO,IAAD,EACEJ,oBAAS,GADX,mBACrBK,EADqB,KACZC,EADY,OAEEN,mBAAS,IAFX,mBAErBO,EAFqB,KAEZC,EAFY,KAItBC,EAAW,uCAAG,8BAAAC,EAAA,sEACKC,MAPf,mEAMU,cACZC,EADY,gBAECA,EAASC,OAFV,OAEZC,EAFY,OAGlBC,QAAQC,IAAItC,EAASoC,IACrBN,EAAW9B,EAASoC,IACpBR,GAAW,GALO,2CAAH,qDAUjB,OAHAW,qBAAU,WACRR,MACC,IACI,CAAEJ,UAASE,WDTOW,GAAnBb,EANO,EAMPA,QAAQE,EAND,EAMCA,QAuCd,OArCAU,qBAAU,WACR,OAAIZ,OAEE,EADGD,EAAaG,EAAQN,MAE9B,CAACI,EAAQJ,IAkCT,8BACE,yBAAKN,UAAU,iBACX,0CACA,yBAAKA,UAAU,eAGnB,6BAASA,UAAU,aACjB,yBAAKA,UAAU,cACXU,GAAWF,EAAUgB,KAAI,SAACC,GAC1B,OAAO,kBAAC,EAAD,eAAUC,IAAKD,EAAS1B,IAAQ0B,SAIzCf,GAAY,yBAAKV,UAAU,iBAC3B,4BAAQA,UAAU,WAAW2B,QA/BpB,WACfpB,GAAQ,SAACqB,GACP,IAAIC,EAAWD,EAAY,EAK3B,OAJAR,QAAQC,IAAIQ,GACTA,EAAW,IACZA,EAAW,GAENA,OAwBH,QACCjB,EAAQY,KAAI,SAACM,EAAKC,GACnB,OAAQ,4BAAQL,IAAKK,EAAO/B,UAAS,mBAAcM,IAAOyB,EAAQ,aAAe,MAASJ,QAAS,kBApBlGpB,EAoBiHwB,KAASA,EAAM,MAGjI,4BAAQ/B,UAAU,WAAW2B,QAnDpB,WAEfpB,GAAQ,SAACqB,GACP,IAAII,EAAWJ,EAAY,EAO3B,OANAR,QAAQC,IAAIW,GACZZ,QAAQC,IAAIT,EAAQxB,OAAO,GACxB4C,EAAWpB,EAAQxB,OAAO,IAC3B4C,EAAW,GAGNA,OAyCH,YEhEVC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.408c41de.chunk.js","sourcesContent":["//paging each homepage\r\nconst paginate = (people) => {  //people=100 array of object\r\n    const itemsPerPage = 10\r\n    const numberOfPages = Math.ceil (people.length/itemsPerPage)   //10 pages\r\n    //we want to create new array from 1 to 10 like [1,2,3,4,5,6,7,8,9,10]--in ES6 we use Array.from for this purpose\r\n    const newArray = Array.from({length:numberOfPages},(_,i)=>{\r\n    // console.log(newArray)\r\n    const start = i*itemsPerPage\r\n    const eachPage = people.slice(start,start+itemsPerPage)\r\n    return eachPage\r\n    })\r\n    return newArray\r\n}\r\n\r\nexport default paginate\r\n","//each person box (image,name.view profile button) on the homepage\r\nimport React from 'react'\r\n\r\nconst Follower = ({avatar_url,login,html_url,id}) => {\r\n  return(\r\n    <article className='card'>\r\n      <img src={avatar_url} alt={login}/>\r\n      <h4>{login}</h4>\r\n      <a href={html_url} className=\"btn\">View profile</a>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default Follower\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useFetch } from './useFetch'\r\nimport Follower from './Follower'\r\n\r\nfunction App() {\r\n  //sates\r\n  const [page,setPage] = useState(0)  //page number\r\n  const [followers,setFollowers] = useState([])  //all of 100 followers\r\n\r\n  //bring loading and data states from useFetch to here--destructuring\r\n  const{loading,apiData} = useFetch()\r\n\r\n  useEffect(()=>{\r\n    if(!loading){  //the point is add loading here otherwise because at first it takes time for api to send the data it will be undefined and can not map over the undefined\r\n      return setFollowers(apiData[page])  //10 arrays of 10\r\n    }else{return}\r\n  },[loading,page])\r\n\r\n  const nextPage = () =>{\r\n    //inside the setPage there will be a call back function\r\n    setPage((currentPage) =>{  //currentpage can be 0-9\r\n      let nextPage = currentPage+1\r\n      console.log(nextPage)\r\n      console.log(apiData.length-1)\r\n      if(nextPage > apiData.length-1){  //end of pages--nextpage will be 10\r\n        nextPage = 0\r\n      }\r\n      //anyway we should return nextPage so we should not return the nextPage inside else\r\n      return nextPage  //otherwise go to the nextPage\r\n      \r\n    })\r\n  }\r\n\r\n  const prevPage = () =>{\r\n    setPage((currentPage)=>{\r\n      let prevPage = currentPage-1\r\n      console.log(prevPage)\r\n      if(prevPage < 0){\r\n        prevPage = 9\r\n      }\r\n      return prevPage\r\n    })\r\n  }\r\n  \r\n  //when user click on each page number without using \"Next\" and \"Prev\" buttons\r\n  const handlePage = (i) =>{\r\n    return setPage(i)\r\n  }\r\n\r\n  return(\r\n    <main>\r\n      <div className='section-title'>\r\n          <h1>pagination</h1>\r\n          <div className='underline'></div>\r\n      </div>\r\n\r\n      <section className='followers'>\r\n        <div className='container'>\r\n          {!loading && followers.map((follower)=>{  //the loading condition must be added here\r\n            return <Follower key={follower.id} {...follower}/>\r\n          })}\r\n        </div>\r\n\r\n        {!loading && (<div className='btn-container'>\r\n          <button className='prev-btn' onClick={prevPage}>prev</button>\r\n          {apiData.map((item,index)=>{  //index= 0 at first--we must use item otherwise not going to work\r\n          return (<button key={index} className={`page-btn ${page===index ? \"active-btn\" : null }`} onClick={()=>handlePage(index)}>{index+1}</button>\r\n          )\r\n          })}\r\n          <button className='next-btn' onClick={nextPage}>next</button>\r\n        </div>\r\n        )}\r\n      </section>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default App\r\n","//fetch data from API\r\nimport { useState, useEffect } from 'react'\r\nimport paginate from './utils'\r\nconst url = 'https://api.github.com/users/john-smilga/followers?per_page=100'\r\n\r\nexport const useFetch = () => {\r\n  const [loading, setLoading] = useState(true)   //it's better to add loading state ehrn we fetch data from api\r\n  const [apiData, setApidata] = useState([])   \r\n\r\n  const getProducts = async () => {\r\n    const response = await fetch(url)\r\n    const data = await response.json()\r\n    console.log(paginate(data))\r\n    setApidata(paginate(data))   //show the data of each page-- (10)Â [Array(10), Array(10), Array(10), Array(10), Array(10), Array(10), Array(10), Array(10), Array(10), Array(10)]\r\n    setLoading(false)\r\n  }\r\n  useEffect(() => {\r\n    getProducts()\r\n  }, [])\r\n  return { loading, apiData }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}